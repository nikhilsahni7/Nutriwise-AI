// First add this new Loader component near the top of the file
const Loader = () => (
  <div className="flex items-center space-x-2">
    <div className="w-4 h-4 rounded-full animate-pulse bg-white"></div>
    <div className="w-4 h-4 rounded-full animate-pulse bg-white"></div>
    <div className="w-4 h-4 rounded-full animate-pulse bg-white"></div>
  </div>
);

// Add isSubmitting state in the component
const [isSubmitting, setIsSubmitting] = useState(false);

// Update handleShareRecipe function
const handleShareRecipe = async () => {
  if (!recipeName || !description || !ingredients[0] || !steps) {
    toast({
      title: "Error",
      description: "Please fill in all required fields",
      variant: "destructive",
    });
    return;
  }

  setIsSubmitting(true);
  try {
    const response = await fetch("/api/community", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        name: recipeName,
        description,
        ingredients: ingredients.filter((i) => i.trim()),
        steps,
        tags: tags.split(",").map((tag) => tag.trim()),
      }),
    });

    if (!response.ok) throw new Error("Failed to share recipe");

    toast({
      title: "Success",
      description: "Recipe shared successfully!",
    });

    // Reset form
    setIngredients([""]);
    setSteps("");
    setTags("");
    setRecipeName("");
    setDescription("");

    // Refresh recipes
    fetchRecipes(searchQuery);
  } catch (error) {
    toast({
      title: "Error",
      description: "Failed to share recipe",
      variant: "destructive",
    });
  } finally {
    setIsSubmitting(false);
  }
};

// Update the CardContent and CardFooter in the create tab
// Replace the existing CardFooter with: