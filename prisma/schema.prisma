generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  user
  admin
}

enum Gender {
  male
  female
  other
}

enum PhysicalActivityLevel {
  level1
  level2
  level3
  level4
  level5
}

enum Goals {
  loseWeight
  gainWeight
  maintainWeight
}

enum DietPreference {
  vegetarian
  vegan
  paleo
  keto
  mediterranean
}

enum Region {
  south_america
  north_america
  indian_subcontinent
  european
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@map("sessions")
}

model User {
  id                   String    @id @default(cuid())
  name                 String?
  email                String?   @unique
  emailVerified        DateTime? @map("email_verified")
  image                String?
  hashedPassword       String?   
  passwordResetAt      DateTime? 
  accounts             Account[]
  sessions             Session[]
  yearOfBirth          Int?      @map("year_of_birth")
  height               Float?
  weight               Float?
  gender               Gender ?   @default(other)
  physicalActivityLevel PhysicalActivityLevel?
  goals                Goals?
  dietPreference       DietPreference?
  bmi                  Float?
  foodAllergies        String[]  @map("food_allergies")
  foodsToAvoid         String[]  @map("foods_to_avoid")
  region               Region?
  meals               Meal[]
  dailyLogs           DailyLog[]
  communities          Community[]
  savedRecipes         SavedRecipe[]
  
  @@map("users")
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  attempts   Int      @default(0)  // Track number of verification attempts
  createdAt  DateTime @default(now())
  type       String   @default("EMAIL") // Can be "EMAIL", "PASSWORD_RESET", etc.

  @@unique([identifier, token])
  @@map("verificationtokens")
}


model DailyLog {
  id                String    @id @default(cuid())
  userId            String
  date              DateTime
  // Aggregated daily totals
  totalCalories     Float     @default(0)
  totalProtein      Float     @default(0)
  totalCarbs        Float     @default(0)
  totalFats         Float     @default(0)
  totalFiber        Float     @default(0)
  totalIron         Float     @default(0)
  totalCalcium      Float     @default(0)
  totalPotassium    Float     @default(0)
  totalVitaminA     Float     @default(0)
  totalVitaminC     Float     @default(0)
  meals             Meal[]
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
  @@map("daily_logs")
}

model Meal {
  id          String    @id @default(cuid())
  userId      String
  dailyLogId  String
  mealType    MealType
  imageUrl    String
  name        String?
  portions    Float     @default(1)
  // Per-meal nutrients
  calories    Float     @default(0)
  protein     Float     @default(0)
  carbs       Float     @default(0)
  fats        Float     @default(0)
  fiber       Float     @default(0)
  iron        Float     @default(0)
  calcium     Float     @default(0)
  potassium   Float     @default(0)
  vitaminA    Float     @default(0)
  vitaminC    Float     @default(0)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  dailyLog    DailyLog  @relation(fields: [dailyLogId], references: [id])
  createdAt   DateTime  @default(now())

  @@map("meals")
}

enum MealType {
  breakfast
  lunch
  dinner
  snack
}


model Community {
  id          String    @id @default(cuid())
  userId      String
  name        String
  description String
  tags        String[]  @default([])
  ingredients String[]  @default([])
  userEmail  String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)


  
}

model SavedRecipe {
  id          String    @id @default(cuid())
  userId      String
  recipeId    String    // Spoonacular recipe ID
  name        String
  image       String?
  calories    Float
  protein     Float
  carbs       Float
  fats        Float
  savedAt     DateTime  @default(now())
  rating      Int?      // User rating 1-5
  cooked      Boolean   @default(false)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("saved_recipes")
}
